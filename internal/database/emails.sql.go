// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: emails.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createEmail = `-- name: CreateEmail :one
INSERT INTO emails (id, created_at, updated_at, email)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, email, is_verified
`

type CreateEmailParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Email     string
}

func (q *Queries) CreateEmail(ctx context.Context, arg CreateEmailParams) (Email, error) {
	row := q.db.QueryRowContext(ctx, createEmail,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Email,
	)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.IsVerified,
	)
	return i, err
}

const getEmail = `-- name: GetEmail :one
SELECT id, created_at, updated_at, email, is_verified
FROM emails
WHERE email = $1
`

func (q *Queries) GetEmail(ctx context.Context, email string) (Email, error) {
	row := q.db.QueryRowContext(ctx, getEmail, email)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.IsVerified,
	)
	return i, err
}

const getEmailByID = `-- name: GetEmailByID :one
SELECT id, created_at, updated_at, email, is_verified
FROM emails
WHERE id = $1
`

func (q *Queries) GetEmailByID(ctx context.Context, id uuid.UUID) (Email, error) {
	row := q.db.QueryRowContext(ctx, getEmailByID, id)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.IsVerified,
	)
	return i, err
}

const updateEmailIsVerified = `-- name: UpdateEmailIsVerified :exec
UPDATE emails
SET is_verified = $2
WHERE id = $1
`

type UpdateEmailIsVerifiedParams struct {
	ID         uuid.UUID
	IsVerified bool
}

func (q *Queries) UpdateEmailIsVerified(ctx context.Context, arg UpdateEmailIsVerifiedParams) error {
	_, err := q.db.ExecContext(ctx, updateEmailIsVerified, arg.ID, arg.IsVerified)
	return err
}
